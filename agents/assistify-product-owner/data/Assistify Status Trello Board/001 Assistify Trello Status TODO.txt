08-17-2024

# TODO
This is a list of cards, work items, user stories, and tasks that are in the todo category.

## Title: Display Static Assistant Information for Logged-in User

### List Name: Todo

### Labels

- assistify-api
- persistence-nosql
- assistify-ui

### Description

**Business Value**: Providing a static list of assistants from the database serves as a foundation to build upon, ensuring that users can see relevant assistant information in all environments.

**Problem**: Users cannot see any assistant information, and access needs to be initially set up.

**Description:** As a user, your role is crucial. You want to see a static list of assistants assigned to you from the database when you log in to access information about available assistants. Your input and feedback are valuable in this process.

The tasks involved include:

1. **Setting up MongoDB with Docker for easy deployment**:
   - Create a `docker-compose.yml` file to set up MongoDB.
   - Ensure the MongoDB service can be brought up with `docker-compose up`.
2. **Storing static assistant information in MongoDB**:
   - Populate the database with a static list of assistant entries.
   - Include sample data that assigns assistants to user emails (e.g., `jus.beall@gmail.com` and `assistify.test@gmail.com`).
3. **Creating an authorized backend endpoint to fetch this static information**:
   - Implement an endpoint (e.g., `/api/assistants`) that retrieves assistant data based on the logged-in user's email.
   - Ensure the endpoint requires user authentication.
   - Return the list of assistants assigned to the authenticated user.
4. **Displaying the static list of assistants on the frontend dashboard for logged-in users**:
   - Set up the frontend to call the backend endpoint.
   - Fetch and display the assistant data on the user dashboard.
   - Ensure the dashboard shows the list of assistants once the user is logged in.

**Acceptance Criteria**:

_Given_ the MongoDB setup and static data
_When_ the user logs in and accesses the dashboard
_Then_ they should see the list of static assistants assigned to them fetched from the database

## Title: Implement Basic Authorization for Displaying Assistants

### List Name: Todo

### Labels

- persistence-nosql
- assistify-api
- assistify-ui

### Description

**Business Value**: Ensuring only authorized users see their assigned assistants enhances security and personalizes the user experience.

**Problem**: Users should only see assistants they are authorized to use, preventing unauthorized access.

**Description**: As a user, I want to see only the authorized assistants to make my experience personalized and secure. This is crucial for me as it ensures that I only interact with the assistants I'm supposed to, enhancing both security and user experience.

The tasks involved are crucial for the successful implementation of the system and include:

1. **Enhancing the backend endpoint to check user authorization before returning assistant information**:
   - Modify the existing `/api/assistants` endpoint to check user authorization.
   - Fetch the user's email from the authentication token and ensure that only assistants assigned to that email are returned.
2. **Storing user-assistant authorization details in MongoDB**:
   - Update the database schema to include authorization details for each user.
   - Store information on which assistants are assigned to which users.
   - Allow manual assignment of assistants to users for initial setup.
3. **Updating the frontend to handle different responses based on authorization**:
   - Adjust the frontend logic to appropriately handle cases where no assistants are authorized for the user.
   - Display a friendly message if the user has no authorized assistants.

**Acceptance Criteria**:

_Given_ the authorization details in MongoDB
_When_ the user logs in and accesses the dashboard
_Then_ they should see only the assistants they are authorized to use

## Title: Track and Display Token Usage per Assistant

### List Name: Todo

### Labels

- assistify-api
- assistify-ui
- AI
- openai-assistants
- persistence-nosql

### Description

**Business Value**: Tracking token usage provides insights into resource consumption and helps manage assistant usage effectively.

**Problem**: Currently, there is a need for a system that can accurately track and display the token usage for each assistant per user, to ensure efficient resource management.

**Description**: As a user, I want to be able to see my token usage for each assistant. This will allow me to manage and monitor my interactions effectively, ensuring I use my resources efficiently.

The tasks involved include:

1. **Creating a mechanism to track token usage per interaction with assistants**:
   - Implement backend logic to count tokens used during each interaction.
   - Ensure token usage is recorded for each user interaction with an assistant.
2. **Storing token usage data in MongoDB**:
   - Update the database schema to store token usage per user and assistant.
   - Log each interaction with details such as the number of tokens consumed, the assistant used, and the timestamp.
3. **Adding an endpoint to fetch token usage data**:
   - Create a backend endpoint (e.g., `/api/token-usage`) that allows users to fetch their token usage data.
   - Ensure the endpoint is secure and only returns data for the authenticated user.
4. **Displaying token usage information on the frontend dashboard**:
   - Fetch token usage data from the backend endpoint.
   - Display a summary of token usage on the user dashboard, including details for each assistant.
   - Ensure the display is user-friendly and provides actionable insights.

**Acceptance Criteria**:

_Given_ the token usage tracking setup
_When_ the user interacts with an assistant
_Then_ the application should track the tokens used
And display the token usage on the dashboard for the user