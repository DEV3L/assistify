# assistify-ui

## index.tsx

### Summary

This code defines the `Home` component in a Next.js application. It uses session status to determine user authentication. Depending on the status, it automatically redirects authenticated users to the `/dashboard` page and unauthenticated users to the `/login` page. While waiting for the session status to be determined, it displays a loading message and includes the `AssistifyHead` component.

```tsx
import AssistifyHead from "@/components/AssistifyHead";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";

export default function Home() {
  const { status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === "authenticated") {
      router.push("/dashboard");
    } else if (status === "unauthenticated") {
      router.push("/login");
    }
  }, [status, router]);

  return (
    <>
      <AssistifyHead />
      <div>Loading...</div>;
    </>
  );
}

```
## AssistifyHead.test.tsx

### Summary

This code is a set of unit tests for the `AssistifyHead` React component. It uses the `@testing-library/react` library to:

1. Check if `AssistifyHead` renders the default title "Assistify".
2. Verify that `AssistifyHead` can render a custom title passed as a prop.

```tsx
import { render, waitFor } from "@testing-library/react";
import AssistifyHead from "./AssistifyHead";

describe("AssistifyHead", () => {
  it("renders default title", async () => {
    render(<AssistifyHead />);
    await waitFor(() => {
      expect(document.title).toBe("Assistify");
    });
  });

  it("renders custom title", async () => {
    const customTitle = "Custom Title";
    render(<AssistifyHead title={customTitle} />);
    await waitFor(() => {
      expect(document.title).toBe(customTitle);
    });
  });
});

```
## login.tsx

### Summary

This code defines a functional React component called `Login`. It includes imports for various components and functions, including `AssistifyHead`, `AssistifyLogo`, `GoogleLogo`, and Material-UI components. The `Login` component fetches a random number when it mounts using `fetchRandomNumber`, and displays it within a styled card. The card contains branding elements, a welcome message, and a button that initiates a Google Sign-In process via `next-auth`.

```tsx
import AssistifyHead from "@/components/AssistifyHead";
import { AssistifyLogo } from "@/components/AssistifyLogo";
import { GoogleLogo } from "@/components/GoogleLogo";
import { Box, Button, Card, CardContent, Typography } from "@mui/material";
import { signIn } from "next-auth/react";
import { useEffect, useState } from "react";
import { fetchRandomNumber } from "../services/service";

const Login = () => {
  const [randomNumber, setRandomNumber] = useState<string | null>(null);

  useEffect(() => {
    const getRandomNumber = async () => {
      const number = await fetchRandomNumber();
      setRandomNumber(number);
    };
    getRandomNumber();
  }, []);

  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      minHeight="100vh"
      bgcolor="background.default"
    >
      <AssistifyHead />
      <Card
        sx={{
          maxWidth: 400,
          p: 4,
          bgcolor: "secondary.main",
          borderRadius: 2,
          boxShadow: 3,
        }}
      >
        <CardContent>
          <Box textAlign="center">
            <AssistifyLogo />
            <Typography variant="h4" component="h2" mt={2} color="text.primary">
              Welcome to Assistify - :)
            </Typography>
            <Typography variant="body2" mt={1} color="text.secondary">
              Your AI Assistant Interaction Hub
            </Typography>
            {randomNumber !== null && (
              <Typography variant="h6" mt={2} color="text.primary">
                Random Number: {randomNumber}
              </Typography>
            )}
          </Box>
          <Button
            onClick={() => signIn("google", { callbackUrl: "/dashboard" })}
            fullWidth
            variant="contained"
            color="primary"
            startIcon={<GoogleLogo />}
            sx={{ mt: 3 }}
          >
            Sign in with Google
          </Button>
        </CardContent>
      </Card>
    </Box>
  );
};

export default Login;

```
## dashboard.tsx

### Summary

This code defines a `Dashboard` component that creates a protected user interface for an application. Key parts include:

1. **Imports**: Various components and utilities from Material-UI, Next.js authentication, and React hooks.
2. **State Management**: Uses the `useState` hook to manage the mobile drawer's open state.
3. **Session Handling**: Utilizes `useSession` to check the user's authentication status.
4. **Navigation Protection**: Redirects unauthenticated users to the login page.
5. **Responsive Drawer**: Implements a left-side navigation drawer that adjusts for mobile and desktop views.
6. **Header**: Contains a toolbar with an app name, user image, and name, and a menu icon to toggle the drawer.
7. **Main Content**: Includes a welcome message, a sign-out button, and the `Protected` component (content for authenticated users).

The component structure ensures a responsive and secure user interface, personalized based on user session.

```tsx
import { AssistifyLogo } from "@/components/AssistifyLogo";
import Protected from "@/components/Protected";
import {
  Home as HomeIcon,
  Menu as MenuIcon,
  Settings as SettingsIcon,
} from "@mui/icons-material";
import {
  AppBar,
  Box,
  CssBaseline,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Typography,
} from "@mui/material";
import { signOut, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useState } from "react";

const drawerWidth = 240;

const Dashboard = () => {
  const { data: session, status } = useSession();
  const [mobileOpen, setMobileOpen] = useState(false);

  const router = useRouter();

  if (status === "loading") {
    return <div>Loading...</div>;
  }

  if (status === "unauthenticated" || !session) {
    router.push("/login");
    return null;
  }

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const drawer = (
    <div>
      <Toolbar />
      <List>
        {["Home", "Settings"].map((text, index) => (
          <ListItem button key={text}>
            <ListItemIcon>
              {index % 2 === 0 ? <HomeIcon /> : <SettingsIcon />}
            </ListItemIcon>
            <ListItemText primary={text} />
          </ListItem>
        ))}
      </List>
    </div>
  );

  return (
    <Box sx={{ display: "flex" }}>
      <CssBaseline />
      <AppBar
        position="fixed"
        sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: "none" } }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Assistify
          </Typography>
          {session && (
            <Box display="flex" alignItems="center">
              <Typography variant="body1" mr={2}>
                {session.user?.name}
              </Typography>
              <img
                src={session.user?.image ?? ""}
                alt="User Icon"
                style={{ borderRadius: "50%", width: 40, height: 40 }}
              />
            </Box>
          )}
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
        aria-label="mailbox folders"
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: "block", sm: "none" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
        >
          {drawer}
        </Drawer>
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: "none", sm: "block" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
        }}
      >
        <Toolbar />
        <div>
          <AssistifyLogo />
          <h2 className="mt-6 text-3xl font-bold text-white">
            Welcome to Assistify
          </h2>
          <p className="mt-2 text-sm text-gray-400">
            Your AI Assistant Interaction Hub
          </p>
        </div>

        <div className="space-y-6">
          <p className="text-xl text-white text-center">
            Welcome, {session.user?.name}
          </p>
          <button
            onClick={() => signOut()}
            className="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            Sign out
          </button>
          <Protected />
        </div>
      </Box>
    </Box>
  );
};

export default Dashboard;

```
## GoogleLogo.tsx

### Summary

The given code defines a React functional component named `GoogleLogo`. This component renders an SVG graphic representing the Google logo. The SVG contains four `path` elements, each defining a part of the logo's shape and filled with the current color. The SVG has fixed width, height, and some additional style classes for positioning.

```tsx
export const GoogleLogo = () => (
  <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
    <path
      fill="currentColor"
      d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
    />
    <path
      fill="currentColor"
      d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
    />
    <path
      fill="currentColor"
      d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
    />
    <path
      fill="currentColor"
      d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
    />
  </svg>
);

```
## login.spec.ts

### Summary

This code defines an automated test using Playwright that:

1. Navigates to a login page.
2. Verifies the page title contains "Assistify".
3. Clicks the "Sign in with Google" button.
4. Performs the Google login process using a helper function.
5. Waits for a welcome message containing a test user name and verifies it is visible.
6. Verifies the test user’s email is present on the page.


```ts
import { expect, test } from "@playwright/test";
import { loginToGoogle } from "./login.steps";

const testUserName = process.env.GOOGLE_TEST_NAME ?? "";
const testUserEmail = process.env.GOOGLE_TEST_EMAIL ?? "";

test("homepage has title and links to intro page", async ({ page }) => {
  await page.goto("/login");
  await expect(page).toHaveTitle(/Assistify/);

  // Click the "Sign in with Google" button
  const signInButton = page.locator("text=Sign in with Google");
  await signInButton.click();

  await loginToGoogle(page);

  // Wait for the redirect and assert the welcome message
  const welcomeMessage = `Welcome, ${testUserName}`;
  console.log(`"Welcome message: ${welcomeMessage}`);

  await page.waitForSelector(`text=${welcomeMessage}`);
  const welcomeElement = page.locator(`text=${welcomeMessage}`);
  await expect(welcomeElement).toBeVisible();

  const emailElement = page.locator(`text=/${testUserEmail}/`);
  await expect(emailElement).toBeVisible();

  // await saveStorageState(page);
});

```
## storageStateHelper.ts

### Summary

This code defines a function `saveStorageState` that saves the storage state of a given Playwright page to a JSON file, converts the JSON content to a Base64 string, and then writes both the JSON and Base64 encoded storage state to separate files.

```ts
import { Buffer } from "buffer";
import { readFileSync, writeFileSync } from "fs";
import { Page } from "playwright";

/**
 * Saves the storage state of the given Playwright page.
 *
 * This function performs the following steps:
 * 1. Saves the storage state to a JSON file.
 * 2. Reads the JSON file and converts its content to a Base64 string.
 * 3. Writes both the JSON and Base64 encoded storage state to files.
 *
 * @param {Page} page - The Playwright page whose storage state is to be saved.
 * @returns {Promise<void>} - A promise that resolves when the storage state has been saved.
 */
export const saveStorageState = async (page: Page): Promise<void> => {
  try {
    // Save the storage state to a JSON file
    await page.context().storageState({ path: "storageState.json" });
  } catch (e) {
    console.error("Error saving storage state", e);
  }

  // Read the JSON file and convert its content to a Base64 string
  const storageStateJson = readFileSync("storageState.json", "utf-8");
  const storageStateBase64 = Buffer.from(storageStateJson).toString("base64");

  // Write both the JSON and Base64 encoded storage state to files
  writeFileSync("storageState.json", storageStateJson);
  writeFileSync("storageState.base64", storageStateBase64);
};

```
## HelloWorld.tsx

### Summary

This React code defines a functional component called `HelloWorld` that renders a `div` containing the text "Hello, World!". The component is then exported for use in other parts of the application.

```tsx
import React from "react";

const HelloWorld: React.FC = () => {
  return <div>Hello, World!</div>;
};

export default HelloWorld;

```
## Protected.tsx

### Summary

This code defines a React component called `ProtectedComponent` that fetches and displays protected data for authenticated users. It uses hooks (`useEffect`, `useState`) to manage state and lifecycle, and a custom hook (`useFetchProtectedData`) to handle data fetching and authentication status. If the user is not authenticated, it prompts them to log in. If the data is still loading, it shows a loading message. Once data is successfully fetched, it displays the data in JSON format.

```tsx
import { useEffect, useState } from "react";
import { useFetchProtectedData } from "../services/service";

const ProtectedComponent = () => {
  const [data, setData] = useState(null);
  const { fetchProtectedData, isAuthenticated } = useFetchProtectedData();

  useEffect(() => {
    const fetchData = async () => {
      if (isAuthenticated) {
        try {
          const result = await fetchProtectedData();
          setData(result);
        } catch (error) {
          console.error("Failed to fetch protected data:", error);
        }
      }
    };
    fetchData();
  }, []);

  if (!isAuthenticated) {
    return <div>Please log in to view this content.</div>;
  }

  if (!data) return <div>Loading...</div>;

  return <div>{JSON.stringify(data)}</div>;
};

export default ProtectedComponent;

```
## HelloWorld.test.tsx

### Summary

The code is a test using the Testing Library to verify that the `HelloWorld` component renders the text "Hello, World!" on the screen. It checks that this text is present in the document after rendering the component.

```tsx
import { render, screen } from "@testing-library/react";
import HelloWorld from "./HelloWorld";

test("renders Hello, World!", () => {
  render(<HelloWorld />);
  expect(screen.getByText("Hello, World!")).toBeInTheDocument();
});

```
## tailwind.config.ts

### Summary

This code defines a Tailwind CSS configuration. It specifies the content sources (which files Tailwind should scan for class names), extends the default theme with new custom radial and conic gradient backgrounds, and includes an empty array for plugins. The configuration is exported for use in a project.

```ts
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;

```
## types.ts

### Summary

This code extends the "next-auth" library in a Next.js application by adding an optional `idToken` property to both the `Session` and `JWT` interfaces. This allows you to store and access an `idToken` in user sessions and JSON Web Tokens (JWT).

```ts
import NextAuth from "next-auth"
import { JWT } from "next-auth/jwt"

declare module "next-auth" {
  interface Session {
    idToken?: string
  }
}

declare module "next-auth/jwt" {
    interface JWT {
      idToken?: string
    }
  }

```
## login.steps.ts

### Summary

This code defines a function `loginToGoogle` that automates the process of logging into a Google account using the Playwright library. It checks if the environment is CI (Continuous Integration). In a non-CI environment, it performs the following steps:

1. Waits for the email input field to appear and fills it with credentials.
2. Clicks the "Next" button.
3. Waits for the password input field to appear and fills it with credentials.
4. Clicks the "Next" button.
5. Optionally clicks a "Continue" button if it appears.
6. Waits for the "Sign Out" text to confirm a successful login.

The email and password are retrieved from environment variables.

```ts
import { Page } from "playwright";

const isCI = !!process.env.CI;

const testUserEmail = process.env.GOOGLE_TEST_EMAIL ?? "";
const testUserPassword = process.env.GOOGLE_TEST_PASSWORD ?? "";

/**
 * Logs into Google using the provided Playwright page instance.
 *
 * @param {Page} page - The Playwright page instance to perform actions on.
 * @returns {Promise<void>} - A promise that resolves when the login process is complete.
 *
 * This function handles the login process for Google. It checks if the environment is CI (Continuous Integration)
 * and performs the login steps accordingly. If not in CI, it waits for the email input, fills it, clicks next,
 * waits for the password input, fills it, clicks next, and finally clicks the continue button if it appears.
 * The function waits for the "Sign Out" text to ensure the login was successful.
 */
export const loginToGoogle = async (page: Page): Promise<void> => {
  if (!isCI) {
    await page.waitForSelector('input[type="email"]');
    await page.fill('input[type="email"]', testUserEmail);
    await page.click("text=Next");
    await page.waitForSelector('input[type="password"]');
    await page.fill('input[type="password"]', testUserPassword);
    await page.click("text=Next");

    const continueSelector = "text=Continue";
    await page.waitForSelector(continueSelector, { timeout: 2500 });
    const continueButton = page.locator(continueSelector);
    await continueButton.click();
  }

  await page.waitForSelector("text=Sign Out");
};

```
## AssistifyLogo.tsx

### Summary

This code defines a React functional component `AssistifyLogo`. It renders an SVG graphic that consists of:

1. A purple circle with a radius of 45 centered at (50, 50). 
2. A white diamond shape in the center.
3. A smaller purple circle with a white border in the middle of the diamond.
4. Four white lines extending outward from the center in a cross pattern.

The SVG is given a set width and height of 16 units and will be automatically centered horizontally due to the class `mx-auto`.

```tsx
export const AssistifyLogo = () => (
  <svg
    className="w-16 h-16 mx-auto"
    viewBox="0 0 100 100"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <circle cx="50" cy="50" r="45" fill="#4F46E5" />
    <path d="M30 50 L50 30 L70 50 L50 70 Z" fill="white" />
    <circle
      cx="50"
      cy="50"
      r="10"
      fill="#4F46E5"
      stroke="white"
      strokeWidth="4"
    />
    <path
      d="M50 20 L50 35 M50 65 L50 80 M20 50 L35 50 M65 50 L80 50"
      stroke="white"
      strokeWidth="4"
      strokeLinecap="round"
    />
  </svg>
);

```
## [...nextauth].ts

### Summary

This code configures NextAuth authentication for a Next.js application using Google as a provider. It specifies Google client ID and secret from environment variables, sets up a secret for NextAuth, and includes custom callback functions for redirecting users, managing JSON Web Tokens (JWT), and handling session information. The callbacks ensure URLs are valid, add the id_token to the token and session objects, and log information during the JWT and session handling process.

```ts
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";


export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID ?? "",
      clientSecret: process.env.GOOGLE_CLIENT_SECRET ?? "",
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    async redirect({ url, baseUrl }) {
      return url.startsWith(baseUrl) ? url : baseUrl;
    },
    async jwt({ token, account }) {
      console.log("JWT callback", token, account);
      if (account?.id_token) {
        token.idToken = account.id_token;
      }
      return token;
    },
    async session({ session, token }) {
      console.log("Session callback", session, token);
      session.idToken = token.idToken;
      return session;
    },
  },
});

```
## jest.setup.ts

### Summary

This code imports the `@testing-library/jest-dom` library, which provides custom DOM element matchers for Jest, simplifying the process of writing assertions for testing UI components.

```ts
import '@testing-library/jest-dom';

```
## AssistifyHead.tsx

### Summary

This React component, `AssistifyHead`, sets the document's title to the given `title` prop using both the `useEffect` hook and the `Head` component from Next.js. The default title is "Assistify" if no `title` prop is provided.

```tsx
import Head from "next/head";
import { useEffect } from "react";

const AssistifyHead = ({ title = "Assistify" }) => {
  useEffect(() => {
    document.title = title;
  }, [title]);

  return (
    <Head>
      <title>{title}</title>
    </Head>
  );
};

export default AssistifyHead;

```
## theme.ts

### Summary

This code creates a custom theme for a Material-UI (MUI) application using the `createTheme` function. Key customizations are:

- **Color Palette:**
  - **Primary:** Purple with white text.
  - **Secondary:** Dark background color.
  - **Background:** Darker shades for the default and paper backgrounds.
  - **Text:** White for primary text and light gray for secondary text.

- **Typography:** Sets the font family to "Dank Mono, Arial, sans-serif".
  
- **Component Styles:** Specifically modifies the `MuiButton` component to:
  - Change the background color to a darker purple on hover.
  - Add a light purple focus ring without an outline when focused.

This theme is exported as the default export.

```ts
import { createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#4F46E5", // Purple color for primary elements
      contrastText: "#ffffff", // White text on primary elements
    },
    secondary: {
      main: "#1a202c", // Dark background color
    },
    background: {
      default: "#0f172a", // Darker background color
      paper: "#1e293b", // Slightly lighter background for paper elements
    },
    text: {
      primary: "#ffffff", // White text
      secondary: "#94a3b8", // Light gray text
    },
  },
  typography: {
    fontFamily: "Dank Mono, Arial, sans-serif", // Use Dank Mono for primary text
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          "&:hover": {
            backgroundColor: "#4338ca", // Darker purple for hover state
          },
          "&:focus": {
            outline: "none",
            boxShadow: "0 0 0 2px #818cf8", // Light purple focus ring
          },
        },
      },
    },
  },
});

export default theme;

```
## playwright.config.ts

### Summary

This code configures Playwright for end-to-end (E2E) testing. Key points include:

1. **Environment Setup**: Loads environment variables with `dotenv` and supports local `.env` configurations.
2. **Playwright Customization**: Uses `playwright-extra` with a stealth plugin to avoid detection by anti-automation measures.
3. **CI Handling**: Adjusts settings based on whether it's running in a Continuous Integration (CI) environment.
4. **Test Configuration**: 
   - Directs tests to the `./e2e` directory.
   - Sets various timeouts and retries.
   - Runs tests fully parallel.
   - Specifies the HTML reporter for results.
   - Configures `baseURL`, trace, screenshots on failure, and browser launch options.
5. **Project Settings**: Specifies a project for testing with the Chromium browser simulating a Desktop Chrome environment.

```ts
import { defineConfig, devices } from "@playwright/test";
import dotenv from "dotenv";
import playwright from "playwright";
import { addExtra } from "playwright-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";

dotenv.config();
dotenv.config({ path: ".env.local", override: true });

const extraPlaywright = addExtra(playwright as any);
extraPlaywright.use(StealthPlugin());

const isCI = !!process.env.CI;

export default defineConfig({
  testDir: "./e2e",
  timeout: 60 * 1000,
  expect: {
    timeout: 5000,
  },
  fullyParallel: true,
  forbidOnly: isCI,
  retries: 0,
  workers: isCI ? 1 : undefined,
  reporter: "html",
  use: {
    actionTimeout: 0,
    baseURL: process.env.BASE_URL || "http://localhost:3000",
    trace: "on-first-retry",
    headless: isCI ? true : false,
    screenshot: "only-on-failure",
    launchOptions: {
      args: ["--disable-blink-features=AutomationControlled"],
    },
    storageState: isCI ? "storageState.json" : undefined,
  },
  projects: [
    {
      name: "chromium",
      use: { ...devices["Desktop Chrome"] },
    },
  ],
});

```
## service.ts

### Summary

This code contains two main exports in a Next.js application using `next-auth` for authentication:

1. **fetchRandomNumber**: Asynchronously fetches a random number from an API endpoint and returns it as a string.

2. **useFetchProtectedData**: A custom hook that:
   - Uses `useSession` to get authentication status and session data.
   - Defines a function to fetch protected data from an API endpoint, only if the user is authenticated.
   - Returns the fetch function and authentication status.

```ts
import { useSession } from "next-auth/react";

export const fetchRandomNumber = async (): Promise<string> => {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/random-number`);
    const data = await response.json();
    return data.message;
  };

export const useFetchProtectedData = () => {
  const { data: session, status } = useSession();

  const fetchProtectedData = async (): Promise<any> => {
    if (status !== "authenticated" || !session?.idToken) {
      throw new Error('User is not authenticated');
    }

    const response = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/protected`, {
      headers: {
        'Authorization': `Bearer ${session.idToken}`
      }
    });

    if (!response.ok) {
      throw new Error('Failed to fetch protected data');
    }

    return response.json();
  };

  return {
    fetchProtectedData,
    isAuthenticated: status === "authenticated"
  };
};
```
## globals.css

### Summary

This code snippet sets up a Tailwind CSS environment and specifies custom design palette variables for colors. It defines root variables for primary and secondary background colors, text colors, and button styles, including hover and focus states. The `body` uses the primary background and text colors, while `button` elements use the primary button color and change on hover and focus.

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Design Palette */
:root {
  --bg-primary: #1a202c; /* bg-gray-900 */
  --bg-secondary: #2d3748; /* bg-gray-800 */
  --text-primary: #ffffff; /* text-white */
  --text-secondary: #a0aec0; /* text-gray-400 */
  --btn-primary: #e53e3e; /* bg-red-600 */
  --btn-primary-hover: #c53030; /* hover:bg-red-700 */
  --btn-focus-ring: #feb2b2; /* focus:ring-red-500 */
}

/* General Styles */
body {
  background-color: var(--bg-primary);
  color: var(--text-primary);
}

button {
  background-color: var(--btn-primary);
  color: var(--text-primary);
}

button:hover {
  background-color: var(--btn-primary-hover);
}

button:focus {
  outline: none;
  ring: 2px solid var(--btn-focus-ring);
}

```
## _app.tsx

### Summary

This code defines a custom Next.js App component named `AssistifyApp` that wraps each page with session management and theming support. Specifically:

1. It uses `SessionProvider` from `next-auth` to manage user sessions.
2. It applies a custom Material-UI theme using `ThemeProvider`.
3. It includes Material-UI's `CssBaseline` to standardize the CSS across different browsers.
4. Finally, it renders the specific page component (`Component`) passed to it with its props (`pageProps`). 

The custom app is then exported as the default export.

```tsx
import { CssBaseline, ThemeProvider } from "@mui/material";
import { SessionProvider } from "next-auth/react";
import type { AppProps } from "next/app";
import "../styles/globals.css";
import theme from "../styles/theme";

function AssistifyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps) {
  return (
    <SessionProvider session={session}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Component {...pageProps} />
      </ThemeProvider>
    </SessionProvider>
  );
}

export default AssistifyApp;

```
## .env.default

### Summary

This code is a configuration file for a web application that integrates with Google for authentication and uses NextAuth for managing auth sessions. It includes:

- Environment variables for Google's OAuth credentials (`GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`).
- Variables for NextAuth configuration (`NEXTAUTH_SECRET` and `NEXTAUTH_URL`).
- The base URL for the API (`NEXT_PUBLIC_API_BASE_URL`).
- Test user credentials and settings for Playwright, a testing tool (`GOOGLE_TEST_NAME`, `GOOGLE_TEST_EMAIL`, `GOOGLE_TEST_PASSWORD`).

```default
GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
NEXTAUTH_URL=http://localhost:3000

# Project Settings
NEXT_PUBLIC_API_BASE_URL=http://localhost:8000

# Playwright Settings
GOOGLE_TEST_NAME="Google Test User"
GOOGLE_TEST_EMAIL=your-email@example.com
GOOGLE_TEST_PASSWORD=your-password

```
## jest.config.ts

### Summary

This code sets up a Jest configuration for a Next.js project. It starts by importing necessary modules and types. It then creates a Jest configuration using `nextJest` to integrate with Next.js. The configuration includes settings for verbosity, clearing mocks, collecting coverage, specifying the coverage directory and provider, setting the test environment to 'jsdom', and pointing to additional setup files. Tests in the `e2e` directory are ignored. Finally, the customized Jest configuration is exported.

```ts
import type { Config } from 'jest';
import nextJest from 'next/jest.js';
import 'ts-node/register';

const createJestConfig = nextJest({
  dir: './',
})

const config: Config = {
  verbose: true,
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: "coverage",
  coverageProvider: "v8",
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  testPathIgnorePatterns: ['<rootDir>/e2e/'],
};

export default createJestConfig(config)

```
